class Solution {
public:
int n,m;
vector<vector<bool>> vispac;
vector<vector<bool>> visatl;
vector<vector<int>> ans;

    void dfs(vector<vector<int>>& heights, vector<vector<bool>>& vis, int i, int j, int height)
    {
        if(i<0 || j<0 || i>=n || j>=m)
            return;
        if(vis[i][j])
            return;
        if(heights[i][j]<height)
            return;
        vis[i][j]=true;
        if(visatl[i][j] && vispac[i][j])
            ans.push_back({i,j});
        height=heights[i][j];
        dfs(heights, vis, i-1, j, height);
        dfs(heights, vis, i, j-1, height);
        dfs(heights, vis, i+1, j, height);
        dfs(heights, vis, i, j+1, height);
    }
 
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        n=heights.size();
        m=heights[0].size();
        vispac=vector<vector<bool>>(n, vector<bool>(m, false));
        visatl=vector<vector<bool>>(n, vector<bool>(m, false));
        for(int i=0; i<n; i++)
            dfs(heights, vispac, i, 0, 0);

        for(int j=0; j<m; j++)
           dfs(heights, vispac, 0, j, 0);

        for(int i=0; i<n; i++)
            dfs(heights, visatl, i, m-1, 0);

        for(int j=0; j<m; j++)
            dfs(heights, visatl, n-1,j, 0);
        return ans;
    }
};
