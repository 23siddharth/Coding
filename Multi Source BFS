#include <bits/stdc++.h>
using namespace std;

const int N=1e3+10;
int INF=1e9+10;
int val[N][N];
int lev[N][N];
bool vis[N][N];

int n,m;

vector<pair<int, int>> moves={
    {0,1}, {0,-1}, {1,0}, {-1,0}, 
    {1,1}, {-1, -1}, {-1, 1}, {1, -1}
};

bool valid(int x, int y)
{
    return (x>=0 && y>=0 && x<n && y<n);
}
void reset()
{
    for(int i=0; i<n; i++)
    {
        for(int j=0; j<m; j++)
        {
            lev[i][j]=INF;
            vis[i][j]=false;
        }
    }
}
int bfs()
{
    queue<pair<int, int>> q;
    int mx=0;
    for(int i=0; i<n; i++)
    {
        for(int j=0; j<m; j++)
        {
            mx=max(mx, val[i][j]);
        }
    }
    for(int i=0; i<n; i++)
    {
        for(int j=0; j<m; j++)
        {
            if(val[i][j]==mx)
            {
                q.push({i,j});
                vis[i][j]=true;
                lev[i][j]=0;
            }
        }
    }
    int ans=0;
    while(!q.empty())
    {
        auto p=q.front();
        int x=p.first, y=p.second;
        q.pop();

        for(auto move : moves)
        {
            int cx=move.first+x, cy=move.second+y;
            if(!valid(cx, cy))
                continue;
            if(vis[cx][cy])
                continue;
            q.push({cx, cy});
            vis[cx][cy]=true;
            lev[cx][cy]=lev[x][y]+1;
            ans=max(ans, lev[cx][cy]);
        }

    }
    return ans;

}
int main()
{
    int tt=1;
    cin >> tt;
    while(tt--)
    {
        cin >> n >> m;
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                cin >> val[i][j];
            }
        }
        reset();
        cout << bfs() << endl;
    }
}
